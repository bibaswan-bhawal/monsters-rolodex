{"version":3,"sources":["components/card/card.js","components/card-list/card-list.js","components/searchBox/searchBox.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","a","fetch","response","json","users","getMonsters","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6VAGaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCLTC,G,MAAW,SAACR,GAEvB,OADAS,QAAQC,IAAIV,GAEV,qBAAKC,UAAU,YAAf,SACGD,EAAMW,SAASC,KAAI,SAACR,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCNdQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACEd,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCiDCG,E,kDAlDb,aAAe,IAAD,8BACZ,gBAQFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAPtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,qDAad,WAAqB,IAAD,QACD,uCAAG,8BAAAI,EAAA,+EAEOC,MACrB,8CAHc,cAEVC,EAFU,gBAKIA,EAASC,OALb,OAKVC,EALU,OAMhB,EAAKT,SAAS,CACZT,SAAUkB,IAPI,kDAUhBpB,QAAQC,IAAI,8BAVI,0DAAH,qDAcjBoB,K,oBAGF,WAAU,IAAD,EAC2BC,KAAKP,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YAEZW,EAAmBrB,EAASsB,QAAO,SAAC7B,GAAD,OACvCA,EAAQE,KAAK4B,cAAcC,SAASd,EAAYa,kBAGlD,OACE,sBAAKjC,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CACEa,YAAY,kBACZC,aAAcgB,KAAKhB,eAErB,cAAC,EAAD,CAAUJ,SAAUqB,W,GA9CVI,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.81a50e16.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nexport const Card = (props) => (\r\n  <div className=\"card-container\">\r\n    <img\r\n      alt=\"monster\"\r\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n    />\r\n    <h2>{props.monster.name}</h2>\r\n    <p>{props.monster.email}</p>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport { Card } from \"../card/card\";\r\n\r\nimport \"./card-list.css\";\r\n\r\nexport const CardList = (props) => {\r\n  console.log(props);\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monsters.map((monster) => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./searchBox.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  <input\r\n    className=\"search\"\r\n    type=\"search\"\r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n  />\r\n);","import \"./css/App.css\";\n\nimport React, { Component } from \"react\";\n\nimport { CardList } from \"./components/card-list/card-list\";\nimport { SearchBox } from \"./components/searchBox/searchBox\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  componentDidMount() {\n    const getMonsters = async () => {\n      try {\n        const response = await fetch(\n          \"https://jsonplaceholder.typicode.com/users\"\n        );\n        const users = await response.json();\n        this.setState({\n          monsters: users,\n        });\n      } catch (err) {\n        console.log(\"Error getting names: \" + err);\n      }\n    };\n\n    getMonsters();\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n        <SearchBox\n          placeholder=\"search monsters\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}